var assert = require('assert'),
    path = require('path'),
    vow = require('${ paths['vow'] }'),
    _ = require('lodash'),
    stringifyObject = require('stringify-object'),
<% if (saveHtml || saveReferenceHtml) { %>
    vowFs = require('${ paths['vow-fs'] }'),
    beautifyHtml = function(html) {
        return require('${ paths['js-beautify'] }').html(html, beautifyHtmlConfig);
    },
    beautifyHtmlConfig = { unformatted: [
    'a', 'span', 'img', 'address', 'script',
    'h1', 'h2', 'h3', 'h4', 'h5','h6',
    'dfn', 'code', 'samp', 'kbd', 'var',
    'cite', 'abbr', 'acronym', 'strong',
    'sub', 'sup', 'tt', 'big', 'small', 'strike',
    'font', 'ins', 'del', 'pre', 'address', 'dt',
    'q', 'i', 'b', 'u', 's', 'bdo', 'em'
    ]},
    saveToFile = function(filenames, actual) {
        if (!Array.isArray(filenames)) {
            filenames = [filenames];
        }

        var data = typeof actual === 'string' ?
            beautifyHtml(actual) :
            '(' + stringifyObject(actual, { indent: '    '}) + ')'; 

        return vow.all(filenames.map(function(filename) {
            return vowFs.write(filename, data, 'utf8');
        }));
    },
<% } %>
    clearRequire = require('${ paths['clear-require'] }'),
    HtmlDiffer = require('${ paths['html-differ'] }').HtmlDiffer,
    htmlDiffer = new HtmlDiffer(${ JSON.stringify(diffOpts) }),
    references = require('${ paths.references }');

<%
var prettifyEngineName = function(ngn) {
    return String(ngn).toLowerCase().replace(' ', '-');
}
%>

describe('${ describe }', function() {
    <% _.forEach(its, function(it) { %>
    describe('${ it }', function() {

        <% _.forEach(engines, function(engine) {
            var lang = engine.lang,
                filename = it,
                engineName = prettifyEngineName(engine.name);

            lang = lang.isReal ? lang.name : null;

            filename += '.' + engineName;

            if (lang) {
                filename += '.' + lang;
            }

            filename += engine.name === 'bemhtml' ? '.html' : '.js';

            print(template('it', {
                it: it,
                before: 'var engine = ' + loadTemplate(
                    engine.target, engine.exportName
                ) + ';',
                engine: engine,
                lang: lang,
                saveHtml: saveHtml,
                saveReferenceHtml: saveReferenceHtml,
                autoAddReference: autoAddReference,
                htmlFilename: filename,
                referenceHtmlFilename: engines.length > 1 ? filename : filename.replace('.' + engineName, '')
            }));
        }); %>

    });
    <% }); %>

}); // /describe ${ describe }

function assertResult(actual, expected) {
    var isOk = typeof actual === 'string' ?
        htmlDiffer.isEqual(actual, expected) :
        _.isEqual(actual, expected);

    isOk ?
        assert.ok(actual) :
        assert.fail(actual, expected, null, '\n');
}
<%
function loadTemplate(target, exportName) {
    return 'loadTemplate(' + JSON.stringify(target) + ', ' + JSON.stringify(exportName) + ')';
}
%>
function loadTemplate(file, exportName) {
    try {
        var res = reRequire(file);
        exportName && (res = res[exportName]);
        return res;
    } catch (e) {
        console.error(e.stack);
        return { apply: function() { return e.stack; } };
    }
}
function reRequire(file) {
    file = require.resolve(file);
    clearRequire(file);
    return require(file);
}
